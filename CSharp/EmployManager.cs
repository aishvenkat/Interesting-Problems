using System;
using System.Collections.Generic;

public class EmployManager{

private int getInitialCost(string[] earning){
 int initialCost = 0;
 for(int j =0;j< earning.Length;j++){
  string earn = earning[j];
  for(int i = j; i < earning.Length ;i++)
    initialCost += (int)char.GetNumericValue(earn[i]); 
 //  foreach(string earn in earning)
//    for(int i = 0; i < earn.Length;i++)
//    initialCost += (int)char.GetNumericValue(earn[i]); 
}
// initialCost /= 2;
 return (initialCost*-1);
}

private int max(int a, int b){
   return ((a> b)?a:b);
}

private int CalculateHire(int[] values, string[] earning, int totalCost, int index){

int hireCost = 0;
for(int i = 0; i < earning.Length; i++)
 hireCost += (int)char.GetNumericValue((earning[index])[i]);
//Console.WriteLine("index:"+index+"hireCost"+hireCost+"totalCost"+totalCost+"value"+values[index]);
hireCost -= values[index];
   totalCost = max(totalCost,totalCost+hireCost);
if((index+1) < values.Length){
   totalCost = CalculateHire(values,earning,totalCost,(index+1));
 /* totalCost = max( CalculateHire(values,earning,(totalCost+hireCost),(index+1)),
		 CalculateHire(values,earning,(totalCost),(index+1)));*/
}
return totalCost;
}

public int maximumEarnings(int[] values, string[] earning){
  int noHireCost = getInitialCost(earning);
  //Console.WriteLine("noHireCost:"+noHireCost);
  int leastHireCost = CalculateHire(values,earning,noHireCost,0);
  //Console.WriteLine("leastHireCost:"+leastHireCost);
  //return ((noHireCost > leastHireCost) ? noHireCost : leastHireCost);
  return leastHireCost;
}

public static void Main(string[] args){
EmployManager e = new EmployManager();
//int[] values = {1,1};
//string[] earning = {"02","20"};
int[] values =	{16, 14, 7, 52, 65, 87, 37, 73, 40, 26, 31, 72, 43, 68, 93, 21, 43, 93, 9, 59, 39, 26, 1, 18, 47, 90, 38, 64, 36, 79, 56, 55, 8, 68, 47, 28, 28, 91, 44, 37, 31, 74, 38, 63, 59};
string[] earning =  {"097592438005479700741046136539993747089872245", "903765012804903112339251893458699935539329800", "730451897872368080075770991341918889197472839", "574078677257346035358155842730061609732369871", "965709752272671178875166468788747759816225911", "251890068374481140267421729122902968005501780", "408670038303327870484887661820931215601334692", "319756309746231051408181638371194775062063553", "827728890101371266305248140184477442747015984", "088223371061031352519762166325120580451857283", "007577040604823359933584199599163522627998548", "542724361140250474048068532450712458150003906", "493364323082093051779787543182161241349542787", "706478237325902842553009839481104370185928606", "938611711130320105943698989773883797778102535", "710011802334081088801194660720673050228162562", "018374756557540806043266558741477912349089574", "020580016294125860565690356810937106136612780", "730382443590759805042115180921108966184464519", "437576800134754046407793040596446563590538554", "195857485938933135270974628083232370011181716", "027114812750706126179040382414932882203131523", "457562884686809969197409870854843348285051122", "610561718248798460534090475894785487519053030", "189847661115589653106384082509801747765899033", "399462634693438655842877809955431476997291305", "631289180692399086008205290986910351983310841", "543771831354147778950488599048398487011601812", "354382278295887241298159058406140441843609719", "981082014590213010163444956860640842479463794", "969079914117118649142987849316098234823668567", "991640397261608773043348031944906330567044767", "398172147032143377862235110800860524340785334", "798679274554237091953834743448235026629574185", "438056174825479510667848475844332204215081717", "759998552028107026630287761712404640566918894", "051780607461317231150225799084853625005810840", "839310064525487243891081698147264216008900665", "997265127170958896401359573139370956580467446", "834325300890591106451100823664607509894068424", "727620361590420681638355991006648781106608881", "292951435783282292481113910193845418007880399", "288897659259765557557510038877573178864483010", "403718958840803678151223304119663819464289101", "509110234386765240946320351294774574056419010"};
//int[] values = {2, 2, 0, 1, 4, 0, 1, 0, 0, 4};
//string[] earning = {"0100451253",  "1010518123",  "0102989242",  "0020093171",  "4590045480",  "5189400676",  "1893500826",  "2121468008",  "5247872007",  "3321066870"};
Console.WriteLine(e.maximumEarnings(values,earning));
}
}
